@using VilicappAPI
@using VilicappClient.BusinessLogic
@using VilicappClient.Models
@inject UsersClient usersclient
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="workorderoverview">VilicApp</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="addworkorder">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Nov nalog
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="workorderoverview">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Pregled nalogov
            </NavLink>
        </li>
        @if (isUserAdmin)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="forkliftoverview">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Viličarji
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="forkliftmaps">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Izposoje
                </NavLink>
            </li>
        }
    </ul>
    <div class="customMojHide" style="margin-left: 28px">
        <MudButton Variant="Variant.Filled" @onclick="LogoutUser" Color="Color.Error" Class="mb-3 px-8">Odjava</MudButton>
    </div>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private LoggedInUserModel user;
    private bool isUserAdmin = false;
    protected override async Task OnInitializedAsync()
    {
        user = await sessionStorage.GetItemAsync<LoggedInUserModel>("User");
        if(user != null)
        {
            isUserAdmin = user.RoleId == (int)UserRole.Admin;
        }
    }

    private async void LogoutUser()
    {
        var loggedUser = await sessionStorage.GetItemAsync<LoginRequestUserModel>("User");
        var success = await usersclient.LogoutAsync(loggedUser.UserName);
        if (!success)
        {
            return;
        }

        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();

        NavManager.NavigateTo("/");

    }
}
