@layout LoginLayout
@page "/"
@using VilicappAPI
@using VilicappServerApp.BusinessLogic
@inject IHttpClientFactory HttpClientFactory
@inject UsersClient usersclient
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<EditForm Model="@user" OnValidSubmit="@ValidateUser">
    <div>
        <br /><br /><br /><br /><br />
    </div>
    <div>
        <h3 style="font-weight:bold; color:purple">Login</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="user.UserName" placeholder="uporabniško ime" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="user.Password" placeholder="geslo" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold; color: red">
        <span class="col-12">@LoginMesssage</span>
    </div>
</EditForm>

@*@if (users != null)
    {
        foreach(var user in users)
        {
            @user.Username
            <br/>
        }
    }*@

@code {

    //ICollection<User> users;
    private LoginRequestUserModel user;
    public string LoginMesssage { get; set; }

    protected override Task OnInitializedAsync()
    {
        user = new LoginRequestUserModel();

        return base.OnInitializedAsync();
    }

    private async Task<bool> ValidateUser()
    {

        var loggedInUserModel = await usersclient.LoginAsync(user);
        if (loggedInUserModel.UserName == "") //failes login
        {
            LoginMesssage = "Napačno uporabniško ime ali geslo";
        }
        else
        {
            await sessionStorage.SetItemAsync("User", loggedInUserModel);
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(loggedInUserModel.UserName);

            NavManager.NavigateTo("/index");
        }

        return await Task.FromResult(true);
    }
}
